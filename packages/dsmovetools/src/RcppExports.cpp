// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/dsmovetools.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// TestDualSparseCoordVec
double TestDualSparseCoordVec(std::vector<unsigned int> x1, std::vector<unsigned int> x2, double v);
RcppExport SEXP _dsmovetools_TestDualSparseCoordVec(SEXP x1SEXP, SEXP x2SEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(TestDualSparseCoordVec(x1, x2, v));
    return rcpp_result_gen;
END_RCPP
}
// DepthLikEval
double DepthLikEval(std::vector<unsigned int> dims, std::vector<unsigned int> coords, std::vector<unsigned int> obs_depths, std::vector<double> zfield, std::vector<double> zvals, int ind);
RcppExport SEXP _dsmovetools_DepthLikEval(SEXP dimsSEXP, SEXP coordsSEXP, SEXP obs_depthsSEXP, SEXP zfieldSEXP, SEXP zvalsSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type obs_depths(obs_depthsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type zfield(zfieldSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type zvals(zvalsSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(DepthLikEval(dims, coords, obs_depths, zfield, zvals, ind));
    return rcpp_result_gen;
END_RCPP
}
// GpsLikEval
double GpsLikEval(std::vector<double> obs_lons, std::vector<double> obs_lats, std::vector<double> semi_majors, std::vector<double> semi_minors, std::vector<double> orientations, double alpha, double test_lon, double test_lat, int ind);
RcppExport SEXP _dsmovetools_GpsLikEval(SEXP obs_lonsSEXP, SEXP obs_latsSEXP, SEXP semi_majorsSEXP, SEXP semi_minorsSEXP, SEXP orientationsSEXP, SEXP alphaSEXP, SEXP test_lonSEXP, SEXP test_latSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lons(obs_lonsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lats(obs_latsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_majors(semi_majorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_minors(semi_minorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type orientations(orientationsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type test_lon(test_lonSEXP);
    Rcpp::traits::input_parameter< double >::type test_lat(test_latSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(GpsLikEval(obs_lons, obs_lats, semi_majors, semi_minors, orientations, alpha, test_lon, test_lat, ind));
    return rcpp_result_gen;
END_RCPP
}
// TestRookOrientation
std::vector<unsigned int> TestRookOrientation(std::vector<unsigned int> head, std::vector<unsigned int> tail);
RcppExport SEXP _dsmovetools_TestRookOrientation(SEXP headSEXP, SEXP tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type head(headSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type tail(tailSEXP);
    rcpp_result_gen = Rcpp::wrap(TestRookOrientation(head, tail));
    return rcpp_result_gen;
END_RCPP
}
// TestRookDot
double TestRookDot(std::vector<unsigned int> head, std::vector<unsigned int> tail, std::vector<unsigned int> nextHead);
RcppExport SEXP _dsmovetools_TestRookDot(SEXP headSEXP, SEXP tailSEXP, SEXP nextHeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type head(headSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type tail(tailSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type nextHead(nextHeadSEXP);
    rcpp_result_gen = Rcpp::wrap(TestRookDot(head, tail, nextHead));
    return rcpp_result_gen;
END_RCPP
}
// TestRookNeighborhood
NumericMatrix TestRookNeighborhood(std::vector<int> dims, std::vector<int> x);
RcppExport SEXP _dsmovetools_TestRookNeighborhood(SEXP dimsSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(TestRookNeighborhood(dims, x));
    return rcpp_result_gen;
END_RCPP
}
// TestSparseNdimArrayReadWrite
NumericMatrix TestSparseNdimArrayReadWrite(NumericMatrix coords, NumericVector values);
RcppExport SEXP _dsmovetools_TestSparseNdimArrayReadWrite(SEXP coordsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(TestSparseNdimArrayReadWrite(coords, values));
    return rcpp_result_gen;
END_RCPP
}
// TestBivariateSparseNdimArrayReadWrite
NumericMatrix TestBivariateSparseNdimArrayReadWrite(NumericMatrix coords1, NumericMatrix coords2, NumericVector values);
RcppExport SEXP _dsmovetools_TestBivariateSparseNdimArrayReadWrite(SEXP coords1SEXP, SEXP coords2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords1(coords1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords2(coords2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(TestBivariateSparseNdimArrayReadWrite(coords1, coords2, values));
    return rcpp_result_gen;
END_RCPP
}
// TestSparseNdimArrayHash
NumericMatrix TestSparseNdimArrayHash(NumericMatrix coords1, NumericMatrix coords2, std::vector<double> values);
RcppExport SEXP _dsmovetools_TestSparseNdimArrayHash(SEXP coords1SEXP, SEXP coords2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords1(coords1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords2(coords2SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(TestSparseNdimArrayHash(coords1, coords2, values));
    return rcpp_result_gen;
END_RCPP
}
// TxModelParams
NumericMatrix TxModelParams(std::vector<unsigned int> cur_loc, std::vector<unsigned int> prev_loc, std::vector<unsigned int> dims, double betaAR);
RcppExport SEXP _dsmovetools_TxModelParams(SEXP cur_locSEXP, SEXP prev_locSEXP, SEXP dimsSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type cur_loc(cur_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type prev_loc(prev_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(TxModelParams(cur_loc, prev_loc, dims, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// TxModelSample
std::vector<unsigned int> TxModelSample(std::vector<unsigned int> cur_loc, std::vector<unsigned int> prev_loc, std::vector<unsigned int> dims, double betaAR);
RcppExport SEXP _dsmovetools_TxModelSample(SEXP cur_locSEXP, SEXP prev_locSEXP, SEXP dimsSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type cur_loc(cur_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type prev_loc(prev_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(TxModelSample(cur_loc, prev_loc, dims, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// TxModelLd
double TxModelLd(std::vector<unsigned int> cur_loc, std::vector<unsigned int> prev_loc, std::vector<unsigned int> dims, double betaAR, std::vector<unsigned int> dst_loc);
RcppExport SEXP _dsmovetools_TxModelLd(SEXP cur_locSEXP, SEXP prev_locSEXP, SEXP dimsSEXP, SEXP betaARSEXP, SEXP dst_locSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type cur_loc(cur_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type prev_loc(prev_locSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dst_loc(dst_locSEXP);
    rcpp_result_gen = Rcpp::wrap(TxModelLd(cur_loc, prev_loc, dims, betaAR, dst_loc));
    return rcpp_result_gen;
END_RCPP
}
// TestZConstrainedRookNeighborhood
NumericMatrix TestZConstrainedRookNeighborhood(std::vector<unsigned int> dims, std::vector<unsigned int> x, std::vector<double> zfield, std::vector<double> zvals);
RcppExport SEXP _dsmovetools_TestZConstrainedRookNeighborhood(SEXP dimsSEXP, SEXP xSEXP, SEXP zfieldSEXP, SEXP zvalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type zfield(zfieldSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type zvals(zvalsSEXP);
    rcpp_result_gen = Rcpp::wrap(TestZConstrainedRookNeighborhood(dims, x, zfield, zvals));
    return rcpp_result_gen;
END_RCPP
}
// SampleConstrainedBridgedRWPath
NumericMatrix SampleConstrainedBridgedRWPath(std::vector<unsigned int> a0coords, std::vector<unsigned int> dstcoords, std::vector<unsigned int> dims, unsigned int steps, unsigned int max_steps, std::vector<double> surface_heights, std::vector<double> domain_heights);
RcppExport SEXP _dsmovetools_SampleConstrainedBridgedRWPath(SEXP a0coordsSEXP, SEXP dstcoordsSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP max_stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dstcoords(dstcoordsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleConstrainedBridgedRWPath(a0coords, dstcoords, dims, steps, max_steps, surface_heights, domain_heights));
    return rcpp_result_gen;
END_RCPP
}
// SampleConstrainedBridgedRWPathFamily
List SampleConstrainedBridgedRWPathFamily(std::vector<unsigned int> a0coords, std::vector<unsigned int> dstcoords, std::vector<unsigned int> dims, unsigned int steps, unsigned int max_steps, std::vector<double> surface_heights, std::vector<double> domain_heights, unsigned int n);
RcppExport SEXP _dsmovetools_SampleConstrainedBridgedRWPathFamily(SEXP a0coordsSEXP, SEXP dstcoordsSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP max_stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dstcoords(dstcoordsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleConstrainedBridgedRWPathFamily(a0coords, dstcoords, dims, steps, max_steps, surface_heights, domain_heights, n));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLightLogConstrainedSelfTxAR
NumericMatrix FFRWLightLogConstrainedSelfTxAR(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericVector log_a0val, std::vector<unsigned int> dims, int steps, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR);
RcppExport SEXP _dsmovetools_FFRWLightLogConstrainedSelfTxAR(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP log_a0valSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLightLogConstrainedSelfTxAR(a0, a0_prev_coords, log_a0val, dims, steps, surface_heights, domain_heights, log_self_tx, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// ARFilteredLL
double ARFilteredLL(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericMatrix obs_coords, NumericVector log_a0val, std::vector<unsigned int> dims, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR);
RcppExport SEXP _dsmovetools_ARFilteredLL(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP obs_coordsSEXP, SEXP log_a0valSEXP, SEXP dimsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_coords(obs_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(ARFilteredLL(a0, a0_prev_coords, obs_coords, log_a0val, dims, surface_heights, domain_heights, log_self_tx, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// ARPredDist
Rcpp::List ARPredDist(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericMatrix obs_coords, NumericVector log_a0val, std::vector<unsigned int> dims, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR, std::vector<unsigned int> pred_steps);
RcppExport SEXP _dsmovetools_ARPredDist(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP obs_coordsSEXP, SEXP log_a0valSEXP, SEXP dimsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP, SEXP pred_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_coords(obs_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type pred_steps(pred_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(ARPredDist(a0, a0_prev_coords, obs_coords, log_a0val, dims, surface_heights, domain_heights, log_self_tx, betaAR, pred_steps));
    return rcpp_result_gen;
END_RCPP
}
// ARBackInfoFilteringDist
Rcpp::List ARBackInfoFilteringDist(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericMatrix obs_coords, NumericVector log_a0val, std::vector<unsigned int> dims, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR, std::vector<unsigned int> pred_steps);
RcppExport SEXP _dsmovetools_ARBackInfoFilteringDist(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP obs_coordsSEXP, SEXP log_a0valSEXP, SEXP dimsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP, SEXP pred_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_coords(obs_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type pred_steps(pred_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(ARBackInfoFilteringDist(a0, a0_prev_coords, obs_coords, log_a0val, dims, surface_heights, domain_heights, log_self_tx, betaAR, pred_steps));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLightLogConstrainedSelfTxARCached
NumericMatrix FFRWLightLogConstrainedSelfTxARCached(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericVector log_a0val, std::vector<unsigned int> dims, int steps, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR);
RcppExport SEXP _dsmovetools_FFRWLightLogConstrainedSelfTxARCached(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP log_a0valSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLightLogConstrainedSelfTxARCached(a0, a0_prev_coords, log_a0val, dims, steps, surface_heights, domain_heights, log_self_tx, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// SattagFilteredLL
double SattagFilteredLL(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericVector log_a0val, double gps_trunc_alpha, std::vector<double> obs_lons, std::vector<double> obs_lats, std::vector<double> obs_semi_majors, std::vector<double> obs_semi_minors, std::vector<double> obs_orientations, std::vector<unsigned int> obs_depth_bins, std::vector<double> lon_gridvals, std::vector<double> lat_gridvals, std::vector<unsigned int> dims, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx, double betaAR);
RcppExport SEXP _dsmovetools_SattagFilteredLL(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP log_a0valSEXP, SEXP gps_trunc_alphaSEXP, SEXP obs_lonsSEXP, SEXP obs_latsSEXP, SEXP obs_semi_majorsSEXP, SEXP obs_semi_minorsSEXP, SEXP obs_orientationsSEXP, SEXP obs_depth_binsSEXP, SEXP lon_gridvalsSEXP, SEXP lat_gridvalsSEXP, SEXP dimsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP, SEXP betaARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< double >::type gps_trunc_alpha(gps_trunc_alphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lons(obs_lonsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lats(obs_latsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_semi_majors(obs_semi_majorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_semi_minors(obs_semi_minorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_orientations(obs_orientationsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type obs_depth_bins(obs_depth_binsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon_gridvals(lon_gridvalsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat_gridvals(lat_gridvalsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    Rcpp::traits::input_parameter< double >::type betaAR(betaARSEXP);
    rcpp_result_gen = Rcpp::wrap(SattagFilteredLL(a0, a0_prev_coords, log_a0val, gps_trunc_alpha, obs_lons, obs_lats, obs_semi_majors, obs_semi_minors, obs_orientations, obs_depth_bins, lon_gridvals, lat_gridvals, dims, surface_heights, domain_heights, log_self_tx, betaAR));
    return rcpp_result_gen;
END_RCPP
}
// SattagExpandNeighborhood
NumericMatrix SattagExpandNeighborhood(NumericMatrix a0, NumericMatrix a0_prev_coords, NumericVector log_a0val, double gps_trunc_alpha, std::vector<double> obs_lons, std::vector<double> obs_lats, std::vector<double> obs_semi_majors, std::vector<double> obs_semi_minors, std::vector<double> obs_orientations, std::vector<unsigned int> obs_depth_bins, std::vector<double> lon_gridvals, std::vector<double> lat_gridvals, std::vector<unsigned int> dims, std::vector<double> surface_heights, std::vector<double> domain_heights, unsigned int obs_ind, unsigned int nsteps);
RcppExport SEXP _dsmovetools_SattagExpandNeighborhood(SEXP a0SEXP, SEXP a0_prev_coordsSEXP, SEXP log_a0valSEXP, SEXP gps_trunc_alphaSEXP, SEXP obs_lonsSEXP, SEXP obs_latsSEXP, SEXP obs_semi_majorsSEXP, SEXP obs_semi_minorsSEXP, SEXP obs_orientationsSEXP, SEXP obs_depth_binsSEXP, SEXP lon_gridvalsSEXP, SEXP lat_gridvalsSEXP, SEXP dimsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP obs_indSEXP, SEXP nstepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a0_prev_coords(a0_prev_coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0val(log_a0valSEXP);
    Rcpp::traits::input_parameter< double >::type gps_trunc_alpha(gps_trunc_alphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lons(obs_lonsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_lats(obs_latsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_semi_majors(obs_semi_majorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_semi_minors(obs_semi_minorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type obs_orientations(obs_orientationsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type obs_depth_bins(obs_depth_binsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon_gridvals(lon_gridvalsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat_gridvals(lat_gridvalsSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type obs_ind(obs_indSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsteps(nstepsSEXP);
    rcpp_result_gen = Rcpp::wrap(SattagExpandNeighborhood(a0, a0_prev_coords, log_a0val, gps_trunc_alpha, obs_lons, obs_lats, obs_semi_majors, obs_semi_minors, obs_orientations, obs_depth_bins, lon_gridvals, lat_gridvals, dims, surface_heights, domain_heights, obs_ind, nsteps));
    return rcpp_result_gen;
END_RCPP
}
// TestFFRW
NumericMatrix TestFFRW(NumericMatrix a0coords, NumericVector a0values, std::vector<unsigned int> dims, int steps);
RcppExport SEXP _dsmovetools_TestFFRW(SEXP a0coordsSEXP, SEXP a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a0values(a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(TestFFRW(a0coords, a0values, dims, steps));
    return rcpp_result_gen;
END_RCPP
}
// TestFFRWLight
NumericMatrix TestFFRWLight(NumericMatrix a0coords, NumericVector a0values, std::vector<unsigned int> dims, int steps);
RcppExport SEXP _dsmovetools_TestFFRWLight(SEXP a0coordsSEXP, SEXP a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a0values(a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(TestFFRWLight(a0coords, a0values, dims, steps));
    return rcpp_result_gen;
END_RCPP
}
// TestFFRWLightLog
NumericMatrix TestFFRWLightLog(NumericMatrix a0coords, NumericVector log_a0values, std::vector<unsigned int> dims, int steps);
RcppExport SEXP _dsmovetools_TestFFRWLightLog(SEXP a0coordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(TestFFRWLightLog(a0coords, log_a0values, dims, steps));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLightLogConstrained
NumericMatrix FFRWLightLogConstrained(NumericMatrix a0coords, NumericVector log_a0values, std::vector<unsigned int> dims, int steps, std::vector<double> surface_heights, std::vector<double> domain_heights);
RcppExport SEXP _dsmovetools_FFRWLightLogConstrained(SEXP a0coordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLightLogConstrained(a0coords, log_a0values, dims, steps, surface_heights, domain_heights));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLightLogConstrainedSelfTx
NumericMatrix FFRWLightLogConstrainedSelfTx(NumericMatrix a0coords, NumericVector log_a0values, std::vector<unsigned int> dims, int steps, std::vector<double> surface_heights, std::vector<double> domain_heights, double log_self_tx);
RcppExport SEXP _dsmovetools_FFRWLightLogConstrainedSelfTx(SEXP a0coordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP, SEXP log_self_txSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    Rcpp::traits::input_parameter< double >::type log_self_tx(log_self_txSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLightLogConstrainedSelfTx(a0coords, log_a0values, dims, steps, surface_heights, domain_heights, log_self_tx));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLogConstrained
std::vector<NumericMatrix> FFRWLogConstrained(NumericMatrix a0coords, NumericVector log_a0values, std::vector<unsigned int> dims, int steps, std::vector<double> surface_heights, std::vector<double> domain_heights);
RcppExport SEXP _dsmovetools_FFRWLogConstrained(SEXP a0coordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLogConstrained(a0coords, log_a0values, dims, steps, surface_heights, domain_heights));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLogConstrainedDst
std::vector<NumericMatrix> FFRWLogConstrainedDst(NumericMatrix a0coords, NumericMatrix dstcoords, NumericVector log_a0values, std::vector<unsigned int> dims, unsigned int steps, unsigned int max_steps, std::vector<double> surface_heights, std::vector<double> domain_heights);
RcppExport SEXP _dsmovetools_FFRWLogConstrainedDst(SEXP a0coordsSEXP, SEXP dstcoordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP max_stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dstcoords(dstcoordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLogConstrainedDst(a0coords, dstcoords, log_a0values, dims, steps, max_steps, surface_heights, domain_heights));
    return rcpp_result_gen;
END_RCPP
}
// FFRWLogConstrainedDstReachable
List FFRWLogConstrainedDstReachable(NumericMatrix a0coords, NumericMatrix dstcoords, NumericVector log_a0values, std::vector<unsigned int> dims, unsigned int steps, unsigned int max_steps, std::vector<double> surface_heights, std::vector<double> domain_heights);
RcppExport SEXP _dsmovetools_FFRWLogConstrainedDstReachable(SEXP a0coordsSEXP, SEXP dstcoordsSEXP, SEXP log_a0valuesSEXP, SEXP dimsSEXP, SEXP stepsSEXP, SEXP max_stepsSEXP, SEXP surface_heightsSEXP, SEXP domain_heightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a0coords(a0coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dstcoords(dstcoordsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_a0values(log_a0valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type surface_heights(surface_heightsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type domain_heights(domain_heightsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFRWLogConstrainedDstReachable(a0coords, dstcoords, log_a0values, dims, steps, max_steps, surface_heights, domain_heights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dsmovetools_TestDualSparseCoordVec", (DL_FUNC) &_dsmovetools_TestDualSparseCoordVec, 3},
    {"_dsmovetools_DepthLikEval", (DL_FUNC) &_dsmovetools_DepthLikEval, 6},
    {"_dsmovetools_GpsLikEval", (DL_FUNC) &_dsmovetools_GpsLikEval, 9},
    {"_dsmovetools_TestRookOrientation", (DL_FUNC) &_dsmovetools_TestRookOrientation, 2},
    {"_dsmovetools_TestRookDot", (DL_FUNC) &_dsmovetools_TestRookDot, 3},
    {"_dsmovetools_TestRookNeighborhood", (DL_FUNC) &_dsmovetools_TestRookNeighborhood, 2},
    {"_dsmovetools_TestSparseNdimArrayReadWrite", (DL_FUNC) &_dsmovetools_TestSparseNdimArrayReadWrite, 2},
    {"_dsmovetools_TestBivariateSparseNdimArrayReadWrite", (DL_FUNC) &_dsmovetools_TestBivariateSparseNdimArrayReadWrite, 3},
    {"_dsmovetools_TestSparseNdimArrayHash", (DL_FUNC) &_dsmovetools_TestSparseNdimArrayHash, 3},
    {"_dsmovetools_TxModelParams", (DL_FUNC) &_dsmovetools_TxModelParams, 4},
    {"_dsmovetools_TxModelSample", (DL_FUNC) &_dsmovetools_TxModelSample, 4},
    {"_dsmovetools_TxModelLd", (DL_FUNC) &_dsmovetools_TxModelLd, 5},
    {"_dsmovetools_TestZConstrainedRookNeighborhood", (DL_FUNC) &_dsmovetools_TestZConstrainedRookNeighborhood, 4},
    {"_dsmovetools_SampleConstrainedBridgedRWPath", (DL_FUNC) &_dsmovetools_SampleConstrainedBridgedRWPath, 7},
    {"_dsmovetools_SampleConstrainedBridgedRWPathFamily", (DL_FUNC) &_dsmovetools_SampleConstrainedBridgedRWPathFamily, 8},
    {"_dsmovetools_FFRWLightLogConstrainedSelfTxAR", (DL_FUNC) &_dsmovetools_FFRWLightLogConstrainedSelfTxAR, 9},
    {"_dsmovetools_ARFilteredLL", (DL_FUNC) &_dsmovetools_ARFilteredLL, 9},
    {"_dsmovetools_ARPredDist", (DL_FUNC) &_dsmovetools_ARPredDist, 10},
    {"_dsmovetools_ARBackInfoFilteringDist", (DL_FUNC) &_dsmovetools_ARBackInfoFilteringDist, 10},
    {"_dsmovetools_FFRWLightLogConstrainedSelfTxARCached", (DL_FUNC) &_dsmovetools_FFRWLightLogConstrainedSelfTxARCached, 9},
    {"_dsmovetools_SattagFilteredLL", (DL_FUNC) &_dsmovetools_SattagFilteredLL, 17},
    {"_dsmovetools_SattagExpandNeighborhood", (DL_FUNC) &_dsmovetools_SattagExpandNeighborhood, 17},
    {"_dsmovetools_TestFFRW", (DL_FUNC) &_dsmovetools_TestFFRW, 4},
    {"_dsmovetools_TestFFRWLight", (DL_FUNC) &_dsmovetools_TestFFRWLight, 4},
    {"_dsmovetools_TestFFRWLightLog", (DL_FUNC) &_dsmovetools_TestFFRWLightLog, 4},
    {"_dsmovetools_FFRWLightLogConstrained", (DL_FUNC) &_dsmovetools_FFRWLightLogConstrained, 6},
    {"_dsmovetools_FFRWLightLogConstrainedSelfTx", (DL_FUNC) &_dsmovetools_FFRWLightLogConstrainedSelfTx, 7},
    {"_dsmovetools_FFRWLogConstrained", (DL_FUNC) &_dsmovetools_FFRWLogConstrained, 6},
    {"_dsmovetools_FFRWLogConstrainedDst", (DL_FUNC) &_dsmovetools_FFRWLogConstrainedDst, 8},
    {"_dsmovetools_FFRWLogConstrainedDstReachable", (DL_FUNC) &_dsmovetools_FFRWLogConstrainedDstReachable, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_dsmovetools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
